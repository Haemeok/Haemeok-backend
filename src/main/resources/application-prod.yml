spring:
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            authorization-grant-type: authorization_code
            redirect-uri: "https://api.haemeok.com/login/oauth2/code/google"
            scope: profile, email

          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            client-authentication-method: POST
            authorization-grant-type: authorization_code
            redirect-uri: "https://api.haemeok.com/login/oauth2/code/google"
            scope: profile_nickname, account_email

          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            authorization-grant-type: authorization_code
            redirect-uri: "https://api.haemeok.com/login/oauth2/code/google"
            scope: name, email

        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

jwt:
  secret: ${JWT_SECRET}
  access-token-validity-in-ms: ${ACCESS_TOKEN_VALIDITY}
  refresh-token-validity-in-ms: ${REFRESH_TOKEN_VALIDITY}

app:
  s3:
    bucket-name: ${APP_S3_BUCKET_NAME}
    upload-base-path: ${APP_S3_UPLOAD_BASE_PATH}
    presigned-url-expiration-minutes: ${APP_S3_PRESIGNED_URL_EXPIRATION_MINUTES}


cloud:
  aws:
    region:
      static: ${CLOUD_AWS_REGION_STATIC}
    credentials:
      access-key: ${AWS_ACCESS_KEY_ID}
      secret-key: ${AWS_SECRET_ACCESS_KEY}


openai:
  api-key: ${OPENAI_API_KEY}

logging:
  level:
    com.jdc.recipe_service.service.AsyncImageService: WARN

resilience4j:
  retry:
    instances:
      aiGenerate:
        max-attempts: 1
        wait-duration: 500ms
  circuitbreaker:
    instances:
      aiGenerate:
        failure-rate-threshold: 50
        sliding-window-size: 10
  timelimiter:
    instances:
      aiGenerate:
        timeout-duration: 60s
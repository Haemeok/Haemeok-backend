package com.jdc.recipe_service.util;

import com.jdc.recipe_service.domain.dto.recipe.AiRecipeRequestDto;
import com.jdc.recipe_service.domain.dto.user.UserSurveyDto;
import com.jdc.recipe_service.domain.entity.Ingredient;
import com.jdc.recipe_service.domain.repository.IngredientRepository;
import com.jdc.recipe_service.domain.type.RobotType;
import com.jdc.recipe_service.service.SurveyService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.util.*;
import java.util.stream.Collectors;

@Component
@Slf4j
public class PromptBuilder {

    private final IngredientRepository ingredientRepo;
    private final SurveyService surveyService;
    private final UnitService unitService;

    public PromptBuilder(IngredientRepository ingredientRepo, SurveyService surveyService, UnitService unitService) {
        this.ingredientRepo = ingredientRepo;
        this.surveyService = surveyService;
        this.unitService = unitService;
    }

    public String buildPrompt(AiRecipeRequestDto request, RobotType type) {
        String mappingString = unitService.mappingAsString();
        log.info("üîß Í∞ïÏ†ú Îã®ÏúÑ Îß§Ìïë: {}", mappingString);

        UserSurveyDto survey = surveyService.getSurvey(request.getUserId());
        Integer spicePref = (survey != null && survey.getSpiceLevel() != null) ? survey.getSpiceLevel() : request.getSpiceLevel();
        String allergyPref = (survey != null && survey.getAllergy() != null && !survey.getAllergy().isBlank()) ? survey.getAllergy() : request.getAllergy();
        Set<String> themePrefs;
        if (survey != null && survey.getTags() != null && !survey.getTags().isEmpty()) {
            themePrefs = survey.getTags();
        } else if (request.getTagNames() != null && !request.getTagNames().isEmpty()) {
            themePrefs = new HashSet<>(request.getTagNames());
        } else {
            themePrefs = Collections.emptySet();
        }
        String tagsJson = themePrefs.isEmpty() ? "[]" : "[\"" + String.join("\", \"", themePrefs) + "\"]";

        List<String> names = request.getIngredients();
        List<String> known = ingredientRepo.findAllByNameIn(names).stream().map(Ingredient::getName).collect(Collectors.toList());
        List<String> unknown = names.stream().filter(n -> !known.contains(n)).collect(Collectors.toList());
        String knownList = known.isEmpty() ? "ÏóÜÏùå" : String.join(", ", known);
        String unknownList = unknown.isEmpty() ? "ÏóÜÏùå" : String.join(", ", unknown);

        String persona;
        switch (type) {
            case CREATIVE -> persona = "ÎÑàÎäî Îß§Ïö∞ Ï∞ΩÏùòÏ†ÅÏù¥Í≥† ÏÉàÎ°úÏö¥ Ï°∞Ìï©ÏùÑ Ï¶êÍ∏∞Îäî ÌïúÍµ≠ ÏöîÎ¶¨ Ï†ÑÎ¨∏Í∞Ä ÌéòÎ•¥ÏÜåÎÇòÎ°ú ÏùëÎãµÌï¥Ï§ò.";
            case HEALTHY -> persona = "ÎÑàÎäî ÏòÅÏñë Í∑†ÌòïÍ≥º Í±¥Í∞ïÌïú Ï°∞Î¶¨Î≤ïÏùÑ ÏµúÏö∞ÏÑ†ÏúºÎ°ú ÏÉùÍ∞ÅÌïòÎäî ÏöîÎ¶¨ Ï†ÑÎ¨∏Í∞Ä ÌéòÎ•¥ÏÜåÎÇòÎ°ú ÏùëÎãµÌï¥Ï§ò.";
            case GOURMET -> persona = "ÎÑàÎäî ÌíçÎ∂ÄÌïòÍ≥† ÍπäÏùÄ ÎßõÏùÑ ÌÉêÎãâÌïòÎ©∞, ÌîÑÎ¶¨ÎØ∏ÏóÑ Ïû¨Î£åÎ°ú Í≥†Í∏âÏä§ÎüΩÍ≥† ÏÑ¨ÏÑ∏Ìïú ÏöîÎ¶¨Î•º ÏÑ†Î≥¥Ïù¥Îäî ÎØ∏ÏãùÍ∞Ä ÌéòÎ•¥ÏÜåÎÇòÎ°ú ÏùëÎãµÌï¥Ï§ò.";
            default -> persona = "ÎÑàÎäî 'Î∞±Ï¢ÖÏõê'Ï≤òÎüº Ï°∞Î¶¨ ÏõêÎ¶¨Î•º Ïûò Ïù¥Ìï¥ÌïòÍ≥† ÎßõÏùò ÍπäÏù¥Î•º ÎçîÌïòÎäî Ï†ÑÎ¨∏ ÌïúÍµ≠ ÏöîÎ¶¨ÏÇ¨ ÌéòÎ•¥ÏÜåÎÇòÎ°ú ÏùëÎãµÌï¥Ï§ò.";
        }

        String servingsInstruction = (request.getServings() != null && request.getServings() > 0)
                ? String.format("Few-Shot ÏòàÏãúÎäî 2Ïù∏Î∂Ñ Í∏∞Ï§ÄÏù¥Îã§. ÎÑàÎäî Î∞òÎìúÏãú %.1fÏù∏Î∂ÑÏóê ÎßûÍ≤å Í∞Å Ïû¨Î£åÏùò quantityÎ•º ÎπÑÎ°ÄÌïòÏó¨ Ï°∞Ï†ïÌï¥Ïïº ÌïúÎã§. (Í≥ÑÏÇ∞Ïãù: ÏòàÏãú Ïñë √ó (%.1f √∑ 2))", request.getServings(), request.getServings())
                : "Ïù∏Î∂Ñ ÏàòÍ∞Ä Ï†úÍ≥µÎêòÏßÄ ÏïäÏïòÏúºÎØÄÎ°ú, 2Ïù∏Î∂Ñ Í∏∞Ï§ÄÏúºÎ°ú Î†àÏãúÌîºÎ•º ÏÉùÏÑ±Ìï¥Ï§ò.";

        String quantityRules = """
                - quantity ÌïÑÎìúÎäî Ïò§ÏßÅ Ïà´Ïûê(ÏÜåÏàòÏ†ê Íµ¨Î∂Ñ ‚Äò.‚Äô)Îßå Ìè¨Ìï®ÌïòÏÑ∏Ïöî. Î∂ÑÏàò(1/2) ÎåÄÏã† 0.5 ÌòïÌÉúÎ°ú Î≥ÄÌôòÌï† Í≤É.
                 - Îã®ÏúÑ(unit) Ï†ïÎ≥¥Îäî Ï†àÎåÄÎ°ú quantityÏóê Ìè¨Ìï®ÌïòÏßÄ ÎßêÍ≥† unit ÌïÑÎìúÏóêÎßå ÌëúÍ∏∞ÌïòÏÑ∏Ïöî.
                """;

        String unitMappingRules = String.format("""
                - DBÏóê Ï†ÄÏû•Îêú Ïû¨Î£åÎäî Î∞òÎìúÏãú ÏïÑÎûò ‚ÄòÏû¨Î£åÎ≥Ñ Í∏∞Î≥∏ Îã®ÏúÑ Îß§Ìïë‚ÄôÏóê Î™ÖÏãúÎêú Îã®ÏúÑÎßå ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî:
                  %s
                """, unitService.mappingAsString());

        String specialInstructions = servingsInstruction
                + "\n" + quantityRules
                + "\n" + unitMappingRules;


        return String.format("""
                        ÏïÑÎûò ÏöîÏ≤≠ Ï°∞Í±¥Ïóê ÎßûÏ∂∞ Î†àÏãúÌîº JSONÏùÑ ÏÉùÏÑ±Ìï¥Ï§ò.
                        
                        [ÌéòÎ•¥ÏÜåÎÇò]
                        %s
                        
                        [ÏöîÏ≤≠ Ï°∞Í±¥]
                        - DBÏóê Ïù¥ÎØ∏ ÏûàÎäî Ïû¨Î£å: [%s]
                        - DBÏóê ÏóÜÎäî Ïû¨Î£å: [%s]
                        - ÏöîÎ¶¨ Ïú†Ìòï: %s
                        - Ìù¨Îßù Ï°∞Î¶¨ ÏãúÍ∞Ñ: %s
                        - Ïù∏Î∂Ñ Ïàò: %s
                        - Îß§Ïö¥Îßõ ÏÑ†Ìò∏ÎèÑ: %s/5
                        - ÏïåÎ†àÎ•¥Í∏∞ Ï†ïÎ≥¥: %s
                        - Ï£ºÏöî Ïû¨Î£å: %s
                        - ÏöîÏ≤≠ ÌÉúÍ∑∏: %s
                        
                        [ÌäπÎ≥Ñ ÏßÄÏãú]
                        %s
                        """,
                persona,
                knownList,
                unknownList,
                Optional.ofNullable(request.getDishType())
                        .filter(s -> !s.isBlank())
                        .orElse("AIÍ∞Ä ÏûêÏú†Î°≠Í≤å Í≤∞Ï†ï"),
                (request.getCookingTime() != null && request.getCookingTime() > 0) ? request.getCookingTime() + "Î∂Ñ Ïù¥ÎÇ¥" : "AIÍ∞Ä ÏûêÎèôÏúºÎ°ú Ï∂îÏ†ï",
                (request.getServings() != null && request.getServings() > 0) ? request.getServings() + "Ïù∏Î∂Ñ" : "AIÍ∞Ä Ï†ÅÏ†àÌûà ÌåêÎã®",
                spicePref != null ? spicePref : "Í∏∞Î≥∏",
                allergyPref != null && !allergyPref.isBlank() ? allergyPref : "ÏóÜÏùå",
                String.join(", ", request.getIngredients()),
                tagsJson,
                specialInstructions
        );
    }
}